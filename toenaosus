import javafx.application.Application;
import javafx.stage.Stage;

import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.HashMap;

import javax.swing.JFrame;
import javax.swing.JOptionPane;

import java.awt.Dimension;
import java.awt.GridLayout;

import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JTextField;
import javax.swing.WindowConstants;

class VigaseSisendiErind extends ArithmeticException {
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	VigaseSisendiErind(String s){
		super(s);
	}

}



public class Peaklass extends Application {


	int onint(String arv) { //kontrollib, kas sisestatud arv on täisarvutüüpi
		boolean tõeväärtus = true;
		try{
			Integer.parseInt(arv);
		}catch(NumberFormatException e){
			tõeväärtus = false;
		}
		if (tõeväärtus == false){
			return -1;
		}
		return Integer.parseInt(arv);
	}

	double ondouble(String arv){ //kontrollib kas sisestatud arv on double tüüpi
		boolean tõeväärtus = true;
		try{
			Double.parseDouble(arv);
		}catch(NumberFormatException e){
			tõeväärtus = false;
		}
		if (tõeväärtus == false){
			return -1;
		}
		return Double.parseDouble(arv);
	}
	
	ArrayList<String> onreaalelement(ArrayList<String> listike, ArrayList<String> listike2){
		boolean tõeväärtus = true;
		for(int i = 0; i < listike.size(); i++)
			try{
				Double.parseDouble(listike.get(i));
			}catch(NumberFormatException e){
				tõeväärtus = false;
			}
		//kontrollib listide pikkuste võrdsust
		if (tõeväärtus == false || listike.size() != listike2.size()){
			listike.clear();
			return listike;
		}
		return listike;
	}
	
	void FailiLugemine(HashMap<String,String> tyyp) {
		try {
			FileReader fileReader = new FileReader("eelmisedvastused.txt");
			BufferedReader bufferedReader =  new BufferedReader(fileReader);

			String line;
			while((line = bufferedReader.readLine()) != null) {
				eelmine_vastus.setText(line); //kirjutab failist rea, mis on viimasena salvestatud
			}    
			bufferedReader.close();            
		}
		catch(FileNotFoundException ex) {
			System.out.println("Faili ei leita");                
		}
		catch(IOException ex) {
			System.out.println("Probleeme faili lugemisega");                  
		}
		try {			            
			DataOutputStream out = new DataOutputStream(new FileOutputStream("eelmisedvastused.txt"));
			out.writeUTF(tyyp.toString()); //kirjutab faili vastuse
			out.close();    

		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public static void main(String[] args) {
		launch(args);
	}

	final JLabel vastus = new JLabel("");
	final JLabel eelmine_vastus = new JLabel("");
	static HashMap<String,String> tyyp = new HashMap<String,String>();

	public void start(Stage peaLava) throws Exception {
		//vastused, mis kuvatakse (peavad olema String tyypi) 
		
		DecimalFormat ymarda = new DecimalFormat("#.####"); //ümardab 4 komakohani
		String[] options = { "Klassikaline tõenäosus", "Dispersioon, keskväärtus, standardhälve", "Bernoulli valem","Bayesi valem",
		"Poissoni jaotus" };
		
		
		
		JFrame kysimused = new JFrame();
		kysimused.setLayout(new GridLayout(2,2,10,10));
		kysimused.add(new JLabel("Vajalik info on siiin."));
		
		
		//nuppude ja lünkade loomine
		JFrame frame = new JFrame();
		@SuppressWarnings({ "rawtypes", "unchecked" })
		JComboBox valikud = new JComboBox(options);
		JButton nupuke = new JButton("Vali");
		JButton kysimus = new JButton("???");
		JTextField soodsad = new JTextField();
		JTextField koik_voimalused = new JTextField();
		JTextField toenaosus1 = new JTextField();
		JTextField toenaosus2 = new JTextField();
		JTextField toenaosus3 = new JTextField();
		
		
		//nuppude ja lünkade lisamine 
		
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setTitle("Tõenäosus");
		frame.setLayout(new GridLayout(8, 5,10,10));

		frame.add(valikud);
		frame.add(nupuke);	
		frame.add(kysimus);
		frame.add(new JLabel("Soodsad võimalused"));
		
		frame.add(soodsad);
		frame.add(new JLabel(""));
		frame.add(new JLabel("Kõik võimalused / väärtused"));
		
		frame.add(koik_voimalused);
		frame.add(new JLabel(""));
		frame.add(new JLabel("Tõenäosus (1) / jaotus"));
		
		frame.add(toenaosus1);
		frame.add(new JLabel(""));
		frame.add(new JLabel("Tõenäosus (2)"));
		
		frame.add(toenaosus2);
		frame.add(new JLabel(""));
		frame.add(new JLabel("Tõenäosus (3)"));
		
		frame.add(toenaosus3);
		frame.add(new JLabel(""));
		frame.add(new JLabel("VASTUS"));
		frame.add(new JLabel(""));
		frame.add(new JLabel("EELMINE VASTUS"));


		nupuke.addActionListener(new ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
				if(valikud.getSelectedItem() == "Klassikaline tõenäosus"){ // kui võrdub selle valikuga, siis saab midagi teha..
						String arvuke = "";
						try {
							String m = soodsad.getText(); //kõik sisestused on string formaadis
							String n = koik_voimalused.getText();
							int k = onint(m);
							int l = onint(n);
							if (l == 0) {
								throw new VigaseSisendiErind("Kõikide võimaluste arv peab olema 0-st erinev!");
							}
							else if (k == -1 || l == -1) {
								throw new VigaseSisendiErind("Nii soodsate kui ka kõikide võimaluste arv peab olema täisarv!");
							}
							else if (k > l) {
								throw new VigaseSisendiErind("Soodsate võimaluste arv peab olema kõikide võimaluste arvust väiksem või võrdne!");
							}

							KlassikalineTõenäosus tn = new KlassikalineTõenäosus(k,l);
							double arv = tn.klassikalinetn();
							
							arvuke = String.valueOf(ymarda.format(arv));
							tyyp.put("Klassikaline tõenäosus", arvuke);
							FailiLugemine(tyyp);
							tyyp.clear();
							
							vastus.setText("Tõenäosus: " + arvuke);
						}

						catch (VigaseSisendiErind nje) {
							JOptionPane.showMessageDialog(null, nje.getMessage()); //need on message kastid, mis ilmuvad kui tekib erind
						}
						

					}
					else if(valikud.getSelectedItem() == "Dispersioon, keskväärtus, standardhälve"){
						try{
							ArrayList<String> jaotused = new ArrayList<String>();
							ArrayList<String> tõenäosused = new ArrayList<String>();
							String [] osad = koik_voimalused.getText().split(" ");
							String [] osad2 = toenaosus1.getText().split(" ");
							double kokku = 0;
							
							for (int i= 0; i < osad.length; i++)
								
								jaotused.add(osad[i]);
								
							for (int j = 0; j < osad2.length; j++){
								
								tõenäosused.add(osad2[j]);
								kokku += Double.parseDouble(osad2[j]);
							}
							if (kokku != 1){
								throw new VigaseSisendiErind("Tõenäosuste summa peab olema 1.");
							}
							
							
							ArrayList<String> m = onreaalelement(jaotused,tõenäosused);
							ArrayList<String> n = onreaalelement(tõenäosused,jaotused);
							
							if (m.isEmpty() | n.isEmpty()){
								throw new VigaseSisendiErind("Jaotused akfafoajf");
							}
							
							DispKeskHälve uus = new DispKeskHälve(jaotused,tõenäosused);
							String kesk = String.valueOf(ymarda.format(uus.keskväärtus()));
							String disp = String.valueOf(ymarda.format(uus.dispersioon()));
							String std = String.valueOf(ymarda.format(uus.standardhälve()));
							tyyp.put("Keskväärtus", kesk);
							tyyp.put("Standardhälve", std);
							tyyp.put("Dispersioon", disp);
							FailiLugemine(tyyp);
							tyyp.clear();
							
							vastus.setText("Keskväärtus: " + kesk + "\n" + "Dispersioon: " + disp + "Standardhälve: " + std);
							
						}
						catch(VigaseSisendiErind er){
							JOptionPane.showMessageDialog(null,er.getMessage());
							
							
						}
						
					}
					else if(valikud.getSelectedItem() == "Bernoulli valem"){
						try {
							String m = soodsad.getText(); //kõik sisestused on string formaadis
							String n = koik_voimalused.getText();
							String t = toenaosus1.getText();
							int k = onint(m);
							int l = onint(n);
							double u = ondouble(t);
							if (l == 0) {
								throw new VigaseSisendiErind("Nulliga ei tohi jagada!");
							}
							else if (k == -1 || l == -1) {
								throw new VigaseSisendiErind("Nii soodsate kui ka kõikide võimaluste arv peab olema täisarv!");
							}
							else if (k > l) {
								throw new VigaseSisendiErind("Soodsate võimaluste arv peab olema kõikide võimaluste arvust väiksem või võrdne!");
							}
							else if (u < 0 || u > 1) {
								System.out.println("Viga");
								throw new VigaseSisendiErind("Tõenäosus peab jääma alati lõiku [0;1]");
							}

							Bernoulli bernoullike = new Bernoulli(k,l,u);
							double vast = bernoullike.bernoull();
							System.out.println(vast);
							String arvuke = String.valueOf(ymarda.format(vast));
							String arvutus = "Tõenäosus on " + arvuke;
							vastus.setText(arvutus);
							tyyp.put("Bernoulli valem", arvuke);
							FailiLugemine(tyyp);
							tyyp.clear();
						}

						catch (VigaseSisendiErind nje) {
							JOptionPane.showMessageDialog(null, nje.getMessage());
						}
						
					}
					else if(valikud.getSelectedItem() == "Bayesi valem") {
						try {
							String m = toenaosus1.getText(); //kõik sisestused on string formaadis
							String n = toenaosus2.getText();
							String t = toenaosus3.getText();
							double k = ondouble(m);
							double l = ondouble(n);
							double u = ondouble(t);
							if (k == 0) {
								throw new VigaseSisendiErind("Nulliga ei tohi jagada!");
							}
							else if (k < 0 || k > 1 || l < 0 || l > 1 || u < 0 || u > 1) {
								throw new VigaseSisendiErind("Tõenäosus peab jääma alati lõiku [0;1]");
							}
							BayesiValem bayes = new BayesiValem(k, l, u);
							double vast = bayes.Bayes();
							String arvuke = String.valueOf(ymarda.format(vast));
							String arvutus = "Tõenäosus on " + arvuke;
							vastus.setText(arvutus);
							tyyp.put("Bayesi valem", arvuke);
							FailiLugemine(tyyp);
							tyyp.clear();
						}
						catch (VigaseSisendiErind nje) {
							JOptionPane.showMessageDialog(null, nje.getMessage());
						}
						
					}
					else if(valikud.getSelectedItem() == "Poissoni jaotus"){
						try {
							String m = soodsad.getText(); //kõik sisestused on string formaadis
							String n = koik_voimalused.getText();
							String t = toenaosus1.getText();
							int k = onint(m);
							int l = onint(n);
							double u = ondouble(t);
							if (l == 0) {
								throw new VigaseSisendiErind("Nulliga ei tohi jagada!");
							}
							else if (k == -1 || l == -1) {
								throw new VigaseSisendiErind("Nii soodsate kui ka kõikide võimaluste arv peab olema täisarv!");
							}
							else if (k > l) {
								throw new VigaseSisendiErind("Soodsate võimaluste arv peab olema kõikide võimaluste arvust väiksem või võrdne!");
							}
							else if (u < 0 || u > 1) {
								System.out.println("Viga");
								throw new VigaseSisendiErind("Tõenäosus peab jääma alati lõiku [0;1]");
							}

							PoissoniJaotus poisson = new PoissoniJaotus(k, l, u);
							double arv = poisson.tõenäosus();
							System.out.println(arv);
							String arvuke = String.valueOf(ymarda.format(arv));
							String arvutus = "Tõenäosus on " + arvuke;
							vastus.setText(arvutus);
							tyyp.put("Poissoni jaotus", arvuke);
							FailiLugemine(tyyp);
							tyyp.clear();
						}

						catch (VigaseSisendiErind nje) {
							JOptionPane.showMessageDialog(null, nje.getMessage());
						}
						

					}


            }


	});

		kysimus.addActionListener(new ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evet){
            	kysimused.pack();
            	kysimused.setLocationRelativeTo(null);
            	kysimused.setVisible(true);
			
			
            }});
		
	
		frame.add(vastus);
		frame.add(new JLabel(""));
		frame.add(eelmine_vastus);
		frame.add(nupuke,1,1);

		frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
		
		frame.setPreferredSize(new Dimension(700, 400));
		frame.pack();
		frame.setLocationRelativeTo(null);
		frame.setVisible(true);

	}


}

